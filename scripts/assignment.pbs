#!/bin/bash
# Job name
#PBS -N pc_assignment_final
# Output files
#PBS -o ./assignment.o
#PBS -e ./assignment.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=1:00:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=32:mpiprocs=32:mem=1gb

# Modules for C++ compiler, CMake and MPI
module load gcc91
module load openmpi/4.0.4
module load cmake/3.15.4

g++() {
	g++-9.1.0 "$@"
}

if [ -z $PROJECT_DIR ]; then
	PROJECT_DIR="parallel_programming_final"
fi

PROJECT_ROOT=$HOME/$PROJECT_DIR

export BENCHMARK_CONFIDENCE_INTERVAL=0.30
export BENCH_SAMPLES=2
export CLEAR_RESULTS=0

# array of optiimization levels to try
optimization_levels=(O0 O2 O3)

######################################################

mkdir results >/dev/null

if [ ${CLEAR_RESULTS} == 1 ]; then
	echo "Clearing previous results"
	rm -rf results/*
else
	echo "Keeping previous results"
fi

# Print information about the cpu
lscpu >results/cpu_info.txt

# Creta a build directory if it does not exist
mkdir build >/dev/null
cd build

for OPTIMIZATION_LEVEL in "${optimization_levels[@]}"; do
	echo "Building with optimization level: ${OPTIMIZATION_LEVEL}"
	mkdir -p ${PROJECT_ROOT}/results/${OPTIMIZATION_LEVEL}
	export OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL}

	cmake -DCMAKE_BUILD_TYPE=Release -DOPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL} -DENABLE_OPTIMIZATION=ON ..

	make -j4
	sh $PROJECT_ROOT/scripts/run_benchmarks.sh
done
